Create database::
create database Note_Management_App;
                                          

1) Tables Creation.


		Create user table;
		CREATE TABLE User (
		    user_id int NOT NULL,
		    user_name varchar(255) NOT NULL,
		    user_added_date Date,
		    user_password varchar(255),
		    user_mobile   int,
		    PRIMARY KEY (user_id)
		);

		desc User;

		create table Note(
		    note_id int NOT NULL,
		    note_title varchar(255) NOT NULL,
		    note_content varchar(255) NOT NULL,
		    note_status Boolean,
		    note_creation_date Date,
		    PRIMARY KEY (note_id)
		);

		create table Category(
		    category_id int NOT NULL,
		    category_name varchar(255) NOT NULL,
		    category_descr varchar(255),
		    category_creation_date Date,
		    category_creator varchar(255),
		    PRIMARY KEY(category_id)
		);

		create table Reminder(
		    reminder_id int NOT NULL,
		    reminder_name varchar(255) NOT NULL,
		    reminder_descr varchar(255),
		    reminder_type varchar(255),
		    reminder_creation_date Date,
		    reminder_creator varchar(255),
		    PRIMARY KEY(reminder_id)
		);
		 create table UserNote(
		  user_id int FOREIGN KEY REFERENCES User(user_id),
		  note_id int,
		  PRIMARY KEY(note_id)
		);
		alter table userNote add foreign key(user_id) references User(user_id);

		 create table CategoryNote(
		     note_id int,
		     category_id int,
		     PRIMARY KEY (note_id));
		alter table CategoryNote add foreign key(category_id) references Category(category_id);

		create table NoteReminder(
		     note_id int,
		     reminder_id int,
		     PRIMARY KEY (reminder_id));
		alter table NoteReminder add foreign key(note_id) references Note(note_id);


 2) INSERT INTO USER:::

			insert into User values(1,'Abhishek','2017-03-18','14563200',9835490770);

			INSERT INTO NOTE:::
			insert into Note values(1,'Education Note','Java notes for stackroute',1,'2017-04-18');

			INSERT INTO Category :::
			insert into Category values(1,'XYZ','XYZ notes for stackroute','2017-04-18','abhi');

			INSERT INTO REMINDER:::
			insert into Reminder values(1,'Reminder1','Reminder1 notes for stackroute','alert','2017-09-29','abhi');

			INSERT INTO USERNOTE:::
			insert into userNote values(1,1);
			insert into userNote values(2,1);
			insert into userNote values(3,1);
			insert into userNote values(4,2);
			insert into userNote values(5,2);
			insert into userNote values(6,2);

			INSERT INTO CATEGORYNOTE:::
			insert into CategoryNote values(1,1);
			insert into CategoryNote values(2,1);
			insert into CategoryNote values(3,1);
			insert into CategoryNote values(4,2);
			insert into CategoryNote values(5,2);
			insert into CategoryNote values(6,2);

			INSERT INTO NOTEREMINDER:::
			insert into NoteReminder values(1,1);
			insert into NoteReminder values(1,2);
			insert into NoteReminder values(1,3);
			insert into NoteReminder values(2,4);
			insert into NoteReminder values(2,5);
			insert into NoteReminder values(2,6);


3) Fetch the row from User table based on Id and Password.

 	select * from User where user_id=1 and user_password='14563200';

4) Fetch all the rows from Note table based on the field note_creation_date.
	
	select * from Note where note_creation_date='2017-04-18';

5) Fetch all the Categories created after the particular Date.

	select * from Category where category_creation_date > '2010-08-29';

6) Fetch all the Note ID from UserNote table for a given User.
	
	select note_id from userNote where user_id=1;

7) Write Update query to modify particular Note for the given note Id.
	
	UPDATE Note
	SET note_title = 'Money note', note_content= 'this is education note'
	WHERE note_id = 1;

8) Fetch all the Notes from the Note table by a particular User.

	SELECT * FROM Note INNER JOIN userNote ON Note.note_id = userNote.note_id where userNote.user_id=1;

9) Fetch all the Notes from the Note table for a particular Category.

	SELECT * FROM Note INNER JOIN CategoryNote ON Note.note_id = CategoryNote.note_id where CategoryNote.category_id=1;

10)Fetch all the reminder details for a given note id.

	SELECT * FROM Reminder INNER JOIN NoteReminder ON Reminder.reminder_id = NoteReminder.reminder_id where NoteReminder.note_id=1;


11)Write a query to create a new Note from particular User (Use Note and UserNote tables - insert statement).

	insert into Note values(4,'split Note','SQL notes for stackroute',0,'2012-04-18');

	insert into userNote values(LAST_INSERT_ID(),2);

12) Write a query to create a new Note from particular User to particular Category(Use Note and NoteCategory tables - insert statement)

	insert into CategoryNote values(insert into Note values(4,'split Note','SQL notes for stackroute',0,'2012-04-18');
	insert into CategoryNote values(last_insert_id(),2);

13) Write a query to set a reminder for a particular note (Use Reminder and NoteReminder tables - insert statement)

	insert into Reminder values(3,'Reminder3','Reminder3 notes for stackroute','wait','2016-08-23','sway');
 	insert into NoteReminder values(2,last_insert_id());

14)Write a query to delete particular Note added by a User(Note and UserNote tables - delete statement)

	 delete from userNote where user_id=2 and note_id=4;
	 delete from CategoryNote where note_id=4;
	 delete from NoteReminder where note_id=4;
	 delete from Note where note_id=4;

15)Write a query to delete particular Note from particular Category(Note and NoteCategory tables - delete statement)

	delete from CategoryNote where category_id=1 and note_id=3;
	delete from userNote where note_id=3;
	delete from Notereminder where note_id=3;
	delete from Note where note_id=3;



16) Create a trigger to delete all matching records from UserNote, NoteReminder and NoteCategory table when :
    1. A particular note is deleted from Note table (all the matching records from UserNote, NoteReminder and NoteCategory should be removed   	      automatically) 
		
		DELIMITER //
		CREATE TRIGGER noteTriggerDel1 BEFORE DELETE ON Note FOR EACH ROW 
		BEGIN 
		DELETE FROM userNote WHERE note_id=old.note_id; 
		DELETE FROM NoteReminder WHERE note_id=old.note_id; 
		DELETE FROM CategoryNote WHERE note_id=old.note_id; 
		END; //
		DELIMITER ;

	        DELETE FROM Note WHERE note_id=7;

    2. A particular user is deleted from User table (all the matching notes should be removed automatically)

	
        
		DELIMITER //
		CREATE TRIGGER userTrigger BEFORE DELETE ON User FOR EACH ROW 
		BEGIN 
		DELETE FROM userNote WHERE note_id=old.user_id; 
		DELETE FROM NoteReminder WHERE note_id=old.user_id; 
		DELETE FROM CategoryNote WHERE note_id=old.user_id; 
		END; //
		DELIMITER ;
		DELETE FROM User WHERE user_id=4;

		DELETE FROM User WHERE user_id=4;



